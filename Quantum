import pygame
import sys
import time
from pygame.locals import *
import random
from operator import itemgetter


pygame.init()

ancho= 1300
alto= 650

usuarios = []
puntajes = []
diccionarioPuntajes = {}
listaordenada = False

listaEnemigos = []
listaMunicion = []

acertado= 0
incorrecto = 0

bancoRespuestas = {}
a = []

ventana = pygame.display.set_mode((1300, 650))

color= pygame.Color(255,255,0)
COLOR_INACTIVE = pygame.Color(0,0,0)
COLOR_ACTIVE = pygame.Color(200,0,0)
white= pygame.Color(250,250,250)
black= pygame.Color(0,0,0)
blue = pygame.Color(0,100,250)
yellow = pygame.Color(255,255,0)
red = pygame.Color(255,0,0)

FONT = pygame.font.Font(None, 28)
FONT_MENU = pygame.font.Font(None, 36)
WIDE_FONT = pygame.font.SysFont("Wide Latin", 80) 



class Instrucciones:

    def __init__(self, x, y, w, h, text='¿Cómo se juega?'):
        
        self.rect = pygame.Rect(x, y, w, h)
        self.color = COLOR_INACTIVE
        self.text = text
        self.txt_surface = FONT_MENU.render(text, True, self.color)
        

    def handle_event(self, event):

        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                instrucciones()
                pygame.quit()
                
            else:

                pass
            
    def update(self):

        pass

    def draw(self, ventana):
        pygame.draw.rect(ventana, white, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+16, self.rect.y+10))

class Jugar:

    def __init__(self, x, y, w, h, text='Jugar'):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = COLOR_INACTIVE
        self.text = text
        self.txt_surface = FONT_MENU.render(text, True, self.color)
       

    def handle_event(self, event):

        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                ingresar()
                pygame.quit()
               
            else:
                
                pass

    def update(self):
       
        pass

    def draw(self, ventana):
        pygame.draw.rect(ventana, white, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+80, self.rect.y+10))

class Records:

    def __init__(self, x, y, w, h, text='Records'):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = COLOR_INACTIVE
        self.text = text
        self.txt_surface = FONT_MENU.render(text, True, self.color)
       

    def handle_event(self, event):

        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                
                records()
                pygame.quit()
                
            else:
                
                pass

    def update(self):
        
        pass
    
    def draw(self, ventana):
        pygame.draw.rect(ventana, white, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+70, self.rect.y+10))

class Salir:

    def __init__(self, x, y, w, h, text='Salir'):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = black
        self.text = text
        self.txt_surface = FONT.render(text, True, self.color)
        self.active = False

    def handle_event(self, event):

        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                menu()
                pygame.quit()
                self.active = not self.active
            else:
                self.active = False
                
            
    def update(self):
        width = max(200, self.txt_surface.get_width()+10)
        self.rect.w = width

    def draw(self, ventana):
        pygame.draw.rect(ventana, blue, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+80, self.rect.y+10))

class Siguiente:

    def __init__(self, x, y, w, h, text='Siguiente'):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = black
        self.text = text
        self.txt_surface = FONT.render(text, True, self.color)
        self.active = False

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                instrucciones1()
                pygame.quit()
                self.active = not self.active
            else:
                self.active = False
            
    def update(self):
        width = max(200, self.txt_surface.get_width()+10)
        self.rect.w = width

    def draw(self, ventana):
        pygame.draw.rect(ventana, yellow, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+50, self.rect.y+10))

class Siguiente1:

    def __init__(self, x, y, w, h, text='Siguiente'):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = COLOR_INACTIVE
        self.text = text
        self.txt_surface = FONT.render(text, True, self.color)
        self.active = False

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            menu()
            pygame.quit()
            if self.rect.collidepoint(event.pos):
                self.active = not self.active
            else:
                self.active = False
            
    def update(self):
        width = max(200, self.txt_surface.get_width()+10)
        self.rect.w = width

    def draw(self, ventana):
        ventana.blit(self.txt_surface, (self.rect.x+70, self.rect.y+10))
        pygame.draw.rect(ventana, self.color, self.rect, 2)

class Atras1:

    def __init__(self, x, y, w, h, text='Atrás'):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = white
        self.text = text
        self.txt_surface = FONT.render(text, True, self.color)
        self.active = False

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                instrucciones()
                pygame.quit()
                self.active = not self.active
            else:
                self.active = False
            
    def update(self):
        width = max(200, self.txt_surface.get_width()+10)
        self.rect.w = width

    def draw(self, ventana):
        pygame.draw.rect(ventana, black, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+80, self.rect.y+10))

        
class Ingresar1:

    def __init__(self, x, y, w, h, text1=''):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = COLOR_INACTIVE
        self.text1 = text1
        self.txt_surface = FONT.render(text1, True, yellow)
        self.active = False

    def handle_event(self, event):
        global contador
        global text2
        
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.active = not self.active
            else:
                self.active = False
            self.color = COLOR_ACTIVE if self.active else COLOR_INACTIVE

        if event.type == pygame.KEYDOWN:
            if self.active:
                contador = 0
                for au in self.text1:
                    contador += 1
                if event.key == pygame.K_RETURN and contador < 8:
                    self.text1 = ''
                if event.key == pygame.K_BACKSPACE:
                    self.text1 = self.text[:-1]
                if contador < 8:
                    self.text1 += event.unicode
                    text2 = self.text1
                self.txt_surface = FONT.render(self.text1, True, self.color )

        else:
            text2= 'N.N.'

    def update(self):
        width = max(200, self.txt_surface.get_width()+10)
        self.rect.w = width

    def draw(self, ventana):
        pygame.draw.rect(ventana, self.color, self.rect, 2)
        ventana.blit(self.txt_surface, (self.rect.x+5, self.rect.y+5))


class Ingresartexto:

    def __init__(self, x, y, w, h, text='Ingrese un Nickname desde hasta 7 caracteres'):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = blue
        self.text = text
        self.txt_surface = FONT.render(text, True, self.color)
        self.active = False

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.active = not self.active
            else:
                self.active = False

    def update(self):
        width = max(400, self.txt_surface.get_width()+10)
        self.rect.w = width


    def draw(self, ventana):
        pygame.draw.rect(ventana, yellow, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+5, self.rect.y+5))

class Ingresaraceptar:


    def __init__(self, x, y, w, h, text='Aceptar'):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = yellow
        self.text = text
        self.txt_surface = FONT.render(text, True, self.color)
        self.active = False

    def handle_event(self, event):

        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):

                usuarios.append(text2)
                preguntasProgramacion()
                pygame.quit()
                self.active = not self.active

            else:
                self.active = False
            

    def update(self):
        width = max(200, self.txt_surface.get_width()+10)
        self.rect.w = width

    def draw(self, ventana):
        pygame.draw.rect(ventana, blue, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+70, self.rect.y+10))
        


class InputBox1:

    def __init__(self, x, y, w, h, text):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = white
        self.text = text
        self.txt_surface = FONT.render(text, True, black)
       

    def handle_event(self, event):
        global acertado
        global incorrecto

        if event.type == pygame.MOUSEBUTTONDOWN and a == bancoRespuestas[1]:

            if self.rect.collidepoint(event.pos):
                acertado = 1

        elif event.type == pygame.MOUSEBUTTONDOWN and a != bancoRespuestas[1]:

            if self.rect.collidepoint(event.pos):
                incorrecto = 1
                
    def update(self):
        pass

    def draw(self, ventana):
        pygame.draw.rect(ventana, self.color, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+10, self.rect.y+9))
        

class InputBox2:

    def __init__(self, x, y, w, h, text):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = white
        self.text = text
        self.txt_surface = FONT.render(text, True, black)
        

    def handle_event(self, event):
        global acertado
        global incorrecto

        if event.type == pygame.MOUSEBUTTONDOWN and a == bancoRespuestas[2]:

            if self.rect.collidepoint(event.pos):
                acertado = 2

        elif event.type == pygame.MOUSEBUTTONDOWN and a != bancoRespuestas[2]:

            if self.rect.collidepoint(event.pos):
                incorrecto = 2

    def update(self):
        pass

    def draw(self, ventana):
        pygame.draw.rect(ventana, self.color, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+10, self.rect.y+9))

class InputBox3:

    def __init__(self, x, y, w, h, text):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = white
        self.text = text
        self.txt_surface = FONT.render(text, True, black)

    def handle_event(self, event):
        global acertado
        global incorrecto
        
        if event.type == pygame.MOUSEBUTTONDOWN and a == bancoRespuestas[3]:
            if self.rect.collidepoint(event.pos):
                acertado = 3                
                          

        elif event.type == pygame.MOUSEBUTTONDOWN and a != bancoRespuestas[3]:

            if self.rect.collidepoint(event.pos):
                incorrecto = 3
                
    def update(self):
        pass

    def draw(self, ventana):
        pygame.draw.rect(ventana, self.color, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+10, self.rect.y+9))
        
class InputBox4:

    def __init__(self, x, y, w, h, text):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = white
        self.text = text
        self.txt_surface = FONT.render(text, True, black)

    def handle_event(self, event):
        global acertado
        global incorrecto
        
        if event.type == pygame.MOUSEBUTTONDOWN and a == bancoRespuestas[4]:
            if self.rect.collidepoint(event.pos):
                acertado = 4                          

        elif event.type == pygame.MOUSEBUTTONDOWN and a != bancoRespuestas[4]:

            if self.rect.collidepoint(event.pos):
                incorrecto = 4
               

    def update(self):
        pass

    def draw(self, ventana):
        pygame.draw.rect(ventana, self.color, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+10, self.rect.y+9))



class InputBoxPregunta:

    def __init__(self, x, y, w, h,text):

        self.rect = pygame.Rect(x, y, w, h)
        self.color = white
        self.text = text
        self.txt_surface = FONT.render(text, True, black)
        self.active = False

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.active = not self.active
            else:
                self.active = False
            

    def update(self):
        pass

    def draw(self, ventana):
        pygame.draw.rect(ventana, self.color, self.rect)
        ventana.blit(self.txt_surface, (self.rect.x+5, self.rect.y+5))


class InputPreguntas:

    def __init__(self, x, y, w, h, numeroPregunta):
        self.rect = pygame.Rect(x, y, w, h)
        self.color = black
        numero = str(numeroPregunta)
        self.text = "Pregunta: "+numero+"/15"
        self.txt_surface = FONT.render(self.text, True, self.color)
        self.active = False

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.active = not self.active
            else:
                self.active = False
            

    def update(self):
        width = max(200, self.txt_surface.get_width()+10)
        self.rect.w = width

    def draw(self, ventana):
        ventana.blit(self.txt_surface, (self.rect.x+5, self.rect.y+5))
        pygame.draw.rect(ventana, self.color, self.rect,2)

class PreguntasRespuestasFacil(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        global a
        global bancoRespuestas
        
        self.miArchivo1 = open('Preguntas easy.txt', 'r')
        self.contenidoArchivo1 = self.miArchivo1.read()
        self.miArchivo1.close()
        self.correctoPf = self.contenidoArchivo1.split('\n')

        self.miArchivo2 = open('Respuestas easy.txt', 'r')
        self.contenidoArchivo2 = self.miArchivo2.read()
        self.miArchivo2.close()
        self.correctoRf = self.contenidoArchivo2.split('\n')

        self.variacion5 = []
        self.listaCorrectaFacil = []
        self.posiblesPreF = []
        self.listarespuestas = []
        self.posiblesResF = {}
        self.diccRespuestas = {}
        self.respuestaCorrecta =""

        self.variacion1 =""
        self.variacion2 =""
        self.variacion3 =""
        self.variacion4 =""

        self.primera = 0
        self.segunda = 0
        self.tercera = 0

    def preguntasF1(self):

        self.posiblesPreF = self.correctoPf
        self.variacion5 = random.choice(self.posiblesPreF)
        self.listaCorrectaFacil = self.posiblesPreF.index (self.variacion5)

    def preguntasF2(self):

        self.variacion5 = random.choice(self.posiblesPreF)
        self.listaCorrectaFacil = self.posiblesPreF.index (self.variacion5)

    def respuestasF(self):

        global a

        for i in [1]:

            for i in [1]:

                self.listarespuestas.append(self.correctoRf[self.primera])
                self.respuestaCorrecta = self.listarespuestas[0]
                a = self.respuestaCorrecta
                self.listarespuestas.append(self.correctoRf[self.primera + 1])
                self.listarespuestas.append(self.correctoRf[self.primera + 2])
                self.listarespuestas.append(self.correctoRf[self.primera + 3])
                self.posiblesResF[i] = self.listarespuestas
                i += 1
        
        self.var1 = self.listarespuestas.copy()
        self.listarespuestas.remove(self.correctoRf[self.primera])
        self.listarespuestas.remove(self.correctoRf[self.primera + 1])
        self.listarespuestas.remove(self.correctoRf[self.primera + 2])
        self.listarespuestas.remove(self.correctoRf[self.primera + 3])

        
        self.variacion1 = random.choice(self.var1)
        self.var1.remove(self.variacion1)
        
        self.variacion2 = random.choice(self.var1)
        self.var1.remove(self.variacion2)
        
        self.variacion3 = random.choice(self.var1)
        self.var1.remove(self.variacion3)
        
        self.variacion4 = random.choice(self.var1)
        self.var1.remove(self.variacion4)
    

    def generarPreguntasFacil(self):

            self.primera=0
            self.segunda=0

            if self.tercera == 0:
                self.preguntasF1()
                self.tercera += 1
            else:
                self.preguntasF2()

            while self.segunda <= self.listaCorrectaFacil:

                self.respuestasF()
                self.primera += 4
                self.segunda += 1
    
            self.comparaRespuestaF()
            return (self.variacion5,self.variacion1,self.variacion2,self.variacion3,self.variacion4)

    def comparaRespuestaF(self):

        global bancoRespuestas

        self.diccRespuestas [1] = self.variacion1
        self.diccRespuestas [2] = self.variacion2
        self.diccRespuestas [3] = self.variacion3
        self.diccRespuestas [4] = self.variacion4

        bancoRespuestas = self.diccRespuestas


class PreguntasRespuestasMedio(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        global a
        global bancoRespuestas
        

        self.miArchivo2 = open('Preguntas medium.txt', 'r')
        self.contenidoArchivo2 = self.miArchivo2.read()
        self.miArchivo2.close()
        self.correctoPm = self.contenidoArchivo2.split('\n')

        self.miArchivo2 = open('Respuestas medium.txt', 'r')
        self.contenidoArchivo2 = self.miArchivo2.read()
        self.miArchivo2.close()
        self.correctoRm = self.contenidoArchivo2.split('\n')

        self.variacion10 = []
        self.listaCorrectaMedio = []
        self.posiblesPreM = []
        self.listarespuestas = []
        self.posiblesResM = {}
        self.diccRespuestas = {}

        self.variacion6 =""
        self.variacion7 =""
        self.variacion8 =""
        self.variacion9 =""

        self.primera = 0
        self.segunda = 0
        self.tercera = 0

    def preguntasM1(self):

        self.posiblesPreM = self.correctoPm
        self.variacion10 = random.choice(self.posiblesPreM)
        self.listaCorrectaMedio = self.posiblesPreM.index (self.variacion10)

    def preguntasM2(self):

        self.variacion10 = random.choice(self.posiblesPreM)
        self.listaCorrectaMedio = self.posiblesPreM.index (self.variacion10)

    def respuestasM(self):

        global a

        for i in [1]:

            for i in [1]:

                self.listarespuestas.append(self.correctoRm[self.primera])
                self.respuestaCorrecta = self.listarespuestas[0]
                a = self.respuestaCorrecta
                self.listarespuestas.append(self.correctoRm[self.primera + 1])
                self.listarespuestas.append(self.correctoRm[self.primera + 2])
                self.listarespuestas.append(self.correctoRm[self.primera + 3])
                self.posiblesResM[i] = self.listarespuestas
                i += 1
        
        self.var2 = self.listarespuestas.copy()
        self.listarespuestas.remove(self.correctoRm[self.primera])
        self.listarespuestas.remove(self.correctoRm[self.primera + 1])
        self.listarespuestas.remove(self.correctoRm[self.primera + 2])
        self.listarespuestas.remove(self.correctoRm[self.primera + 3])

        
        self.variacion6 = random.choice(self.var2)
        self.var2.remove(self.variacion6)
        
        self.variacion7 = random.choice(self.var2)
        self.var2.remove(self.variacion7)
        
        self.variacion8 = random.choice(self.var2)
        self.var2.remove(self.variacion8)
        
        self.variacion9 = random.choice(self.var2)
        self.var2.remove(self.variacion9)
 

    def generarPreguntasMedio(self):

            self.primera=0
            self.segunda=0

            if self.tercera == 0:
                self.preguntasM1()
                self.tercera += 1
            else:
                self.preguntasM2()

            while self.segunda <= self.listaCorrectaMedio:

                self.respuestasM()
                self.primera += 4
                self.segunda += 1
        
            self.comparaRespuestaM()
            return (self.variacion10,self.variacion6,self.variacion7,self.variacion8,self.variacion9)

    def comparaRespuestaM(self):

        global bancoRespuestas

        self.diccRespuestas [1] = self.variacion6
        self.diccRespuestas [2] = self.variacion7
        self.diccRespuestas [3] = self.variacion8
        self.diccRespuestas [4] = self.variacion9

        bancoRespuestas = self.diccRespuestas



class PreguntasRespuestasDificil(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        global a
        global bancoRespuestas
                
        self.miArchivo2 = open ("Preguntas hard.txt", "r")
        self.contenidoArchivo2 = self.miArchivo2.read ()
        self.miArchivo2.close ()    
        self.correctoP = self.contenidoArchivo2.split("\n")

        self.miArchivo2 = open ("Respuestas hard.txt", "r")
        self.contenidoArchivo2 = self.miArchivo2.read ()
        self.miArchivo2.close () 
        self.correctoR = self.contenidoArchivo2.split("\n")

        self.variacion5 = []
        self.listaCorrecta = []
        self.posiblesPre = []
        self.listarespuestas = []
        self.posiblesRes = {}
        self.diccRespuestas = {}

        self.variacion1 =""
        self.variacion2 =""
        self.variacion3 =""
        self.variacion4 =""

        self.primera = 0
        self.segunda = 0
        self.tercera = 0

    def preguntasD1(self):

        self.posiblesPre = self.correctoP
        self.variacion5 = random.choice(self.posiblesPre)
        self.listaCorrecta = self.posiblesPre.index (self.variacion5)

    def preguntasD2(self):

        self.variacion5 = random.choice(self.posiblesPre)
        self.listaCorrecta = self.posiblesPre.index (self.variacion5)

    def respuestasD(self):

        global a

        for i in [1]:

            for i in [1]:

                self.listarespuestas.append(self.correctoR[self.primera])
                self.respuestaCorrecta = self.listarespuestas[0]
                a = self.respuestaCorrecta
                self.listarespuestas.append(self.correctoR[self.primera + 1])
                self.listarespuestas.append(self.correctoR[self.primera + 2])
                self.listarespuestas.append(self.correctoR[self.primera + 3])
                self.posiblesRes[i] = self.listarespuestas
                i += 1
        
        self.var1 = self.listarespuestas.copy()
        self.listarespuestas.remove(self.correctoR[self.primera])
        self.listarespuestas.remove(self.correctoR[self.primera + 1])
        self.listarespuestas.remove(self.correctoR[self.primera + 2])
        self.listarespuestas.remove(self.correctoR[self.primera + 3])

        
        self.variacion1 = random.choice(self.var1)
        self.var1.remove(self.variacion1)
        
        self.variacion2 = random.choice(self.var1)
        self.var1.remove(self.variacion2)
        
        self.variacion3 = random.choice(self.var1)
        self.var1.remove(self.variacion3)
        
        self.variacion4 = random.choice(self.var1)
        self.var1.remove(self.variacion4)
 

    def generarPreguntas(self):

            self.primera=0
            self.segunda=0

            if self.tercera == 0:
                self.preguntasD1()
                self.tercera += 1
            else:
                self.preguntasD2()

            while self.segunda <= self.listaCorrecta:

                self.respuestasD()
                self.primera += 4
                self.segunda += 1
        
            self.comparaRespuesta()

            return (self.variacion5,self.variacion1,self.variacion2,self.variacion3,self.variacion4)
            

    def comparaRespuesta(self):

        global bancoRespuestas

        self.diccRespuestas [1] = self.variacion1
        self.diccRespuestas [2] = self.variacion2
        self.diccRespuestas [3] = self.variacion3
        self.diccRespuestas [4] = self.variacion4

        bancoRespuestas = self.diccRespuestas


class Soldado (pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.ImagenSoldadoUno = pygame.image.load("SolUno.png")
        self.ImagenSoldadoDos = pygame.image.load("SolDos.png")
        self.ImagenSoldadoTres = pygame.image.load("SolTres.png")

        self.ImagenMuerto = pygame.image.load("bala.png")
        self.ImagenMunicion = pygame.image.load("municion.png")
        

        self.listaImagenes=[self.ImagenSoldadoTres, self.ImagenSoldadoDos,self.ImagenSoldadoUno]
        self.posImagen = 0
        
        self.ImagenSoldado = self.listaImagenes[self.posImagen]
        self.rect = self.ImagenSoldado.get_rect()

        self.rect.centerx= 100
        self.rect.centery = 270

        self.vida = True
        self.listaDisparo = []

        self.tiempoCambio=0
        self.iniciar=False
        

        self.SonidoDisparo = pygame.mixer.Sound("disparo.mp3")

    def mortusEst(self):
        self.vida = False
        self.ImagenSoldado = self.ImagenMuerto 

    def dibujar(self, superficie):
        if self.vida == True:
            
            self.ImagenSoldado = self.listaImagenes[self.posImagen]
            superficie.blit(self.ImagenSoldado, self.rect)
        else:

            superficie.blit(self.ImagenSoldado, self.rect)
        

    def comportamiento(self, tiempo):

        if self.iniciar == False:
            self.tiempoCambio= tiempo+1
            self.iniciar = True
        
        if self.vida == True:

            if self.tiempoCambio == tiempo:
                self.posImagen += 1
                self.tiempoCambio += 1

                if self.posImagen > len(self.listaImagenes)-1:
                    self.posImagen = 0

    def disparo(self):
        
        disparoSoldado= Proyectil(self.rect.centerx+27,self.rect.centery+20, "bala.png", True)
        self.listaDisparo.append(disparoSoldado)
        self.SonidoDisparo.play()


    def dibujarMunicion(self, superficie):

        if len(listaMunicion) == 4:
            superficie.blit(self.ImagenMunicion, (1100, 50))
            superficie.blit(self.ImagenMunicion, (1150, 50))
            superficie.blit(self.ImagenMunicion, (1200, 50))

        elif len(listaMunicion) == 3:
            superficie.blit(self.ImagenMunicion, (1100, 50))
            superficie.blit(self.ImagenMunicion, (1150, 50))

        elif len(listaMunicion) == 2:
            superficie.blit(self.ImagenMunicion, (1100, 50))

        else:
            pass

class Enemigo (pygame.sprite.Sprite):
    def __init__(self,posx,posy, imagenUno, imagenDos, imagenTres, imagenCuatro, velocidad, segundos):
        pygame.sprite.Sprite.__init__(self)

        self.ImagenEnemigoUno = pygame.image.load(imagenUno)
        self.ImagenEnemigoDos = pygame.image.load(imagenDos)
        self.ImagenEnemigoTres = pygame.image.load(imagenTres)
        self.ImagenEnemigoCuatro = pygame.image.load(imagenCuatro)

        self.listaImagenes=[self.ImagenEnemigoUno, self.ImagenEnemigoDos, self.ImagenEnemigoTres, self.ImagenEnemigoCuatro]
        self.posImagen = 0
        
        self.ImagenEnemigo = self.listaImagenes[self.posImagen]
        self.rect = self.ImagenEnemigo.get_rect()

        self.velocidad = velocidad

        self.rect.top = posy
        self.rect.left = posx
        
        self.tiempoCambio = segundos
        self.iniciar=False

        self.contador = 0

        self.conquista= False

    def dibujar(self, superficie):

        self.ImagenEnemigo = self.listaImagenes[self.posImagen]
        superficie.blit(self.ImagenEnemigo, self.rect)

    def comportamiento(self, tiempo):

        if self.iniciar == False:
            self.tiempoCambio= tiempo+1
            self.iniciar = True
        
        if self.conquista == False:
            
            self.__movimientoLateral()
            
            if self.tiempoCambio == tiempo:
                self.posImagen += 1
                self.tiempoCambio += 1

                if self.posImagen > len(self.listaImagenes)-1:
                    self.posImagen = 0

    def __movimientoLateral(self):

        self.rect.left = self.rect.left - self.velocidad              


class Proyectil (pygame.sprite.Sprite):
    def __init__(self, posx, posy, ruta, personaje):
        pygame.sprite.Sprite.__init__(self)

        self.ImagenBala = pygame.image.load(ruta)
        self.ImagenFuego = pygame.image.load("fuego.png")

        self.rect = self.ImagenBala.get_rect()

        self.velocidadDisparo = 5
        

        self.rect.top = posy
        self.rect.left = posx

        self.disparoPersonaje = personaje

    def trayectoria (self):

        if self.disparoPersonaje == True:
            self.rect.left = self.rect.left + self.velocidadDisparo
        else:
            self.rect.left = self.rect.left - self.velocidadDisparo
            
    def dibujar(self, superficie):

        superficie.blit(self.ImagenBala, self.rect)
        superficie.blit(self.ImagenFuego,(140,260))

class Ambiente (pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

        self.ImagenFondoUno = pygame.image.load("mañana.png")
        self.ImagenFondoDos = pygame.image.load("medioDia.png")
        self.ImagenFondoTres = pygame.image.load("tarde.png")
        self.ImagenFondoCuatro = pygame.image.load("anochecer.png")
        self.ImagenFondoCinco = pygame.image.load("noche.png")

        self.rectUno = self.ImagenFondoUno.get_rect()
        self.rectDos = self.ImagenFondoDos.get_rect()
        self.rectTres = self.ImagenFondoUno.get_rect()
        self.rectCuatro = self.ImagenFondoDos.get_rect()
        self.rectCinco = self.ImagenFondoUno.get_rect()        


        self.rectUno.top = 0
        self.rectUno.left = 0

        self.rectDos.top = 0
        self.rectDos.left = 1300

        self.rectTres.top = 0
        self.rectTres.left = 2600

        self.rectCuatro.top = 0
        self.rectCuatro.left = 3900

        self.rectCinco.top = 0
        self.rectCinco.left = 5200

        self.velocidad = 1     
        

    def trayectoria (self):

        self.rectUno.left = self.rectUno.left - self.velocidad
        self.rectDos.left = self.rectDos.left - self.velocidad
        self.rectTres.left = self.rectTres.left - self.velocidad
        self.rectCuatro.left = self.rectCuatro.left - self.velocidad
        self.rectCinco.left = self.rectCinco.left - self.velocidad
        
            
    def dibujar(self, superficie):

        if self.rectUno.left < -5199:

            self.rectUno.left = 5200
            self.rectDos.left = 3900
            self.rectTres.left = 2600
            self.rectCuatro.left = 1300
            self.rectCinco.left = 0
            
            
        elif self.rectCinco.left < -5199:

            self.rectUno.left = 0
            self.rectDos.left = 1300
            self.rectTres.left = 2600
            self.rectCuatro.left = 3900
            self.rectCinco.left = 5200
            
        superficie.blit(self.ImagenFondoUno, self.rectUno)
        superficie.blit(self.ImagenFondoDos, self.rectDos)
        superficie.blit(self.ImagenFondoTres, self.rectTres)
        superficie.blit(self.ImagenFondoCuatro, self.rectCuatro)
        superficie.blit(self.ImagenFondoCinco, self.rectCinco)
    
def guardar1(us,pun):
    guardar=open("UsuariosPuntajes.txt", "a")
    guardar.write(us+" "+str(pun)+"\n")
    guardar.close()
    
def importar1():
    global listaordenada
    global lista

    guardar=open("UsuariosPuntajes.txt","r")
    contenido=guardar.read()
    guardar.close()

    lista=contenido.split()

    for z in range(len(lista)):
        if z%2==0:
            usuarios.append(lista[z])
        if z%2!=0:
            puntajes.append(lista[z])
    for zi in range(len(usuarios)):
        diccionarioPuntajes[usuarios[zi]]=puntajes[zi]

    listaordenada = sorted(diccionarioPuntajes.items(), key =itemgetter(1), reverse = True)

def cargarEnemigoUno(velocidad, segundos):
    
    enemigo = Enemigo(1400,250,"LoboUno.png","LoboDos.png","LoboTres.png", "LoboDos.png", velocidad, segundos)
    listaEnemigos.append(enemigo)

def cargarEnemigoDos(velocidad, segundos):
    
    enemigo = Enemigo(1400,220,"OsoDerecha.png","OsoIzquierda.png","OsoMedio.png", "OsoMedioEstirado.png", velocidad, segundos)
    listaEnemigos.append(enemigo)

def cargarEnemigoTres(velocidad, segundos):
    
    enemigo = Enemigo(1400,220,"OsoDerecha.png","OsoIzquierda.png","OsoMedio.png", "OsoMedioEstirado.png",velocidad, segundos)
    listaEnemigos.append(enemigo)

def detenerTodo():

    for enemigo in listaEnemigos:
        enemigo.conquista = True    


def menu():
    instrucciones1 = Instrucciones(550, 450, 240, 50)
    jugar1= Jugar(550, 390, 240, 50)
    records1= Records(550, 510, 240, 50)
    input_boxes = [instrucciones1,jugar1,records1]
    done = False

    while not done:

        for event in pygame.event.get():

            if event.type == pygame.QUIT:
                done = True

            for box in input_boxes:
                box.handle_event(event)

        for box in input_boxes:
            box.update()

        ventana.blit(pygame.image.load("portada.png"),(0,0))

        for box in input_boxes:
            box.draw(ventana)

        pygame.display.flip()
        
    pygame.quit()

def ingresar():

    clock = pygame.time.Clock()
    ingresar1 = Ingresar1(520, 360, 200, 40)
    ingresartexto = Ingresartexto(400, 260, 400, 80)
    ingresaraceptar= Ingresaraceptar(520, 410, 50, 40)
    saliringresar=Salir(520,590,200,40)
    input_boxes = [ingresar1,ingresartexto,ingresaraceptar,saliringresar]
    done = False

    while not done:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            for box in input_boxes:
                box.handle_event(event)

        for box in input_boxes:
            box.update()

        ventana.blit(pygame.image.load("fondoInicio (2).png"),(0,0))
        for box in input_boxes:
            box.draw(ventana)

        pygame.display.flip()
        clock.tick(30)

def instrucciones():

    clock = pygame.time.Clock()
    texto = FONT_MENU.render("El juego consta de una serie de preguntas de seleccion multiple,",1,red)
    texto2= FONT_MENU.render("que son interrogantes sobre el lenguaje de programación Python.",1,red)
    salirinstrucciones=Salir(680,590,200,40)
    siguiente=Siguiente(350,590,200,40)
    cuadropreguntas= pygame.image.load("cuadroInstrucciones.png")
    input_boxes = [salirinstrucciones,siguiente]
    rectangulo = pygame.Rect(195,45,875,525)
    done = False
    
    while done == False:

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True

            for box in input_boxes:
                box.handle_event(event)

        for box in input_boxes:
            box.update()

        ventana.blit(pygame.image.load("fondoInicio (2).png"),(0,0))
        for box in input_boxes:
            box.draw(ventana)

        pygame.draw.rect(ventana, white,rectangulo)
        ventana.blit(cuadropreguntas, (250,130))
        ventana.blit(texto,(245,50))
        ventana.blit(texto2,(240,80))
        pygame.display.flip()
        clock.tick(2)
        
    pygame.quit()
    
def instrucciones1():

    clock = pygame.time.Clock()
    texto = FONT_MENU.render("A medida que avance y responda más preguntas, la velocidad",1,red)
    texto2= FONT_MENU.render("de las amenazas aumentará. En caso de ser alcanzado por estas, perderá.",1,red)
    salirinstrucciones=Salir(780,590,200,40)
    atras=Atras1(360,590,200,40)
    input_boxes = [salirinstrucciones,atras]
    cuadroVelocidad= pygame.image.load("velocidad.png")
    rectangulo = pygame.Rect(175,60,915,490)
    done = False

    while done == False:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True

            for box in input_boxes:
                box.handle_event(event)

        for box in input_boxes:
            box.update()

        ventana.blit(pygame.image.load("fondoInicio (2).png"),(0,0))
        for box in input_boxes:
            box.draw(ventana)

        pygame.draw.rect(ventana, white,rectangulo)
        ventana.blit(cuadroVelocidad, (250,150))   
        ventana.blit(texto,(260,70))
        ventana.blit(texto2,(195,100))
        
        pygame.display.flip()
        clock.tick(2)
        
    pygame.quit()

def records():

    if listaordenada:

        if len(listaordenada) == 1:

            texto = FONT_MENU.render("El jugador "+ listaordenada[0][0]+" ocupa el primer lugar con el puntaje "+listaordenada[0][1],1,white)
            texto1 = FONT_MENU.render("-",1,blue)
            texto2 = FONT_MENU.render("-",1,blue)

        elif len(listaordenada) == 2:

            texto = FONT_MENU.render("El jugador "+ listaordenada[0][0]+" ocupa el primer lugar con el puntaje "+listaordenada[0][1],1,white)
            texto1 = FONT_MENU.render("El jugador "+ listaordenada[1][0]+" ocupa el segundo lugar con el puntaje "+listaordenada[1][1],1,white)
            texto2 = FONT_MENU.render("-",1,blue)

        else:

            texto = FONT_MENU.render("El jugador "+ listaordenada[0][0]+" ocupa el primer lugar con el puntaje "+listaordenada[0][1],1,white)
            texto1 = FONT_MENU.render("El jugador "+ listaordenada[1][0]+" ocupa el segundo lugar con el puntaje "+listaordenada[1][1],1,white)
            texto2 = FONT_MENU.render("El jugador "+ listaordenada[2][0]+" ocupa el tercer lugar con el puntaje "+listaordenada[2][1],1,white)

    else:

        texto = FONT_MENU.render("                       Aún no existen puntajes!",1,white)
        texto1 = FONT_MENU.render("-",1,blue)
        texto2 = FONT_MENU.render("-",1,blue)

    rectangulo = pygame.Rect(250,80,800,300)   
    salirrecords=Salir(550,590,200,40)
    input_boxes = [salirrecords]
    done = False

    while done == False:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            for box in input_boxes:
                box.handle_event(event)

        for box in input_boxes:
            box.update()

        ventana.blit(pygame.image.load("fondoInicio (2).png"),(0,0))
        
        for box in input_boxes:
            box.draw(ventana)
        
        pygame.draw.rect(ventana, blue,rectangulo)   
        ventana.blit(texto,(330,150))
        ventana.blit(texto1,(330,200))
        ventana.blit(texto2,(330,250))
        pygame.display.flip()
        done == True
        
    pygame.quit()

def preguntasProgramacion():

    global listaMunicion
    global acertado
    global incorrecto

    global a
    global bancoRespuestas

    pygame.mixer.music.load("cancion.mp3")
    pygame.mixer.music.play(5)
    
    gameOver = WIDE_FONT.render("Game Over", True, white)
    
    
    
    fondo= Ambiente()
    jugador= Soldado()
    pregFacil= PreguntasRespuestasFacil()
    pregMedio = PreguntasRespuestasMedio()
    pregDificil = PreguntasRespuestasDificil()
    
    dificultad = 1
    cargarEnemigoUno(dificultad,1)
    
    enJuego= True
    nivel = pygame.time.Clock()
     
    bien=0
    pregunta=1
    mato = 1

    uno=0
    puntaje = 0

    guarda = True

    while True:

        
        if bien <= 3:
            pass
        else:
            dificultad += 1
            bien = 0

        if dificultad > 3:
            enJuego = False
            
        ventana.fill(black)        
        nivel.tick(100)
        ventana.blit(gameOver, (250, 250))
        


        tiempo= int(pygame.time.get_ticks()/250)
        
        for event in pygame.event.get():

            if event.type == QUIT:
                pygame.quit()
                sys.exit()

        if len(listaMunicion)== 0:

            listaMunicion=[True,True,True,True]
        
        if enJuego == True:

            if uno == 0 and dificultad == 1:
                j,k,l,m,n = pregFacil.generarPreguntasFacil()
                uno += 1

            elif uno == 0 and dificultad == 2:
                j,k,l,m,n = pregMedio.generarPreguntasMedio()
                uno += 1

            elif uno == 0 and dificultad == 3:
                j,k,l,m,n = pregDificil.generarPreguntas()
                uno += 1
                
            input_box1 = InputBox1(60, 500, 550, 40,k)
            input_box2 = InputBox2(60, 560, 550, 40,l)
            input_box3 = InputBox3(680, 500, 550, 40,m)
            input_box4 = InputBox4(680, 560, 550, 40,n)
            input_boxPregunta = InputBoxPregunta(50, 400, 1200, 60,j)
            input_preguntas = InputPreguntas(500, 615, 70, 30,pregunta)
           
            input_boxes = [input_box1,input_box2,input_box3,input_box4,input_boxPregunta,input_preguntas] 

            for box in input_boxes:
                box.handle_event(event)

            for box in input_boxes:
                box.update()


            if acertado == 1:

                jugador.disparo()
                pygame.time.delay(80)
                listaMunicion.pop(0)
                acertado = 0
                pregunta +=1
                mato = pregunta
                uno = 0

            elif acertado == 2:

                jugador.disparo()
                pygame.time.delay(80)
                listaMunicion.pop(0)
                acertado = 0
                pregunta +=1
                mato = pregunta
                uno = 0

            elif acertado == 3:

                jugador.disparo()
                pygame.time.delay(80)
                listaMunicion.pop(0)
                acertado = 0
                pregunta +=1
                mato = pregunta
                uno = 0

            elif acertado == 4:

                jugador.disparo()
                pygame.time.delay(80)
                listaMunicion.pop(0)
                acertado = 0
                pregunta +=1
                mato = pregunta
                uno = 0

            elif incorrecto == 1:

                jugador.disparo()
                pygame.time.delay(80)
                listaMunicion.pop(0)
                pregunta +=1
                incorrecto = 0
                uno = 0
                 

            elif incorrecto == 2:

                jugador.disparo()
                pygame.time.delay(80)
                listaMunicion.pop(0)
                pregunta +=1
                incorrecto = 0
                uno = 0
                

            elif incorrecto == 3:

                jugador.disparo()
                pygame.time.delay(80)
                listaMunicion.pop(0)
                pregunta +=1
                incorrecto = 0
                uno = 0
                

            elif incorrecto == 4:

                jugador.disparo()
                pygame.time.delay(80)
                listaMunicion.pop(0)
                pregunta +=1
                incorrecto = 0
                uno = 0
                
                
            
            

            fondo.dibujar(ventana)
            fondo.trayectoria()

            for box in input_boxes:
                box.draw(ventana)

        
            jugador.comportamiento(tiempo)
            jugador.dibujar(ventana)
            jugador.dibujarMunicion(ventana)
        
        if len(jugador.listaDisparo) > 0:
            for i in jugador.listaDisparo:
                i.dibujar(ventana)
                i.trayectoria()

                if i.rect.left > 1290:
                    jugador.listaDisparo.remove(i)
                else:
                    for enemigo in listaEnemigos:
                        if i.rect.colliderect(enemigo.rect):

                            jugador.listaDisparo.remove(i)

                            if mato == pregunta:
                                
                                listaEnemigos.remove(enemigo)
                                
                                if dificultad == 1:
                                    
                                    cargarEnemigoUno(dificultad,tiempo)                                  
                                    bien += 1
                                    puntaje +=1

                                elif dificultad == 2:
                                    
                                    cargarEnemigoDos(dificultad,tiempo)
                                    bien += 1
                                    puntaje +=1
                                        
                                elif dificultad >= 3:
                                    cargarEnemigoTres(dificultad, tiempo)
                                    bien += 1
                                    puntaje +=1
                                    

                    

        if len(listaEnemigos)> 0:

            for enemigo in listaEnemigos:
                enemigo.comportamiento(tiempo)
                enemigo.dibujar(ventana)
                

                if enemigo.rect.colliderect(jugador.rect):
                    jugador.mortusEst()
                    enJuego= False
                    detenerTodo()
                    listaEnemigos.remove(enemigo)

        if enJuego == False:
            pygame.mixer.music.stop()

            if guarda:
                puntajes.append(puntaje)
                guarda = False
                guardar1(text2,puntaje)
        
        pygame.display.update()

importar1()
menu()
